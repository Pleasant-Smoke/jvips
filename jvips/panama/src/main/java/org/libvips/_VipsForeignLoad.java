/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsForeignLoad {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("g_class")
                        ).withName("g_type_instance"),
                        Constants$root.C_INT$LAYOUT.withName("ref_count"),
                        MemoryLayout.paddingLayout(32),
                        Constants$root.C_POINTER$LAYOUT.withName("qdata")
                    ).withName("parent_instance"),
                    Constants$root.C_INT$LAYOUT.withName("constructed"),
                    Constants$root.C_INT$LAYOUT.withName("static_object"),
                    Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
                    Constants$root.C_POINTER$LAYOUT.withName("nickname"),
                    Constants$root.C_POINTER$LAYOUT.withName("description"),
                    Constants$root.C_INT$LAYOUT.withName("preclose"),
                    Constants$root.C_INT$LAYOUT.withName("close"),
                    Constants$root.C_INT$LAYOUT.withName("postclose"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
                ).withName("parent_instance"),
                Constants$root.C_INT$LAYOUT.withName("hash"),
                Constants$root.C_INT$LAYOUT.withName("found_hash"),
                Constants$root.C_INT$LAYOUT.withName("pixels"),
                MemoryLayout.paddingLayout(32)
            ).withName("parent_object")
        ).withName("parent_object"),
        Constants$root.C_INT$LAYOUT.withName("memory"),
        Constants$root.C_INT$LAYOUT.withName("access"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        Constants$root.C_INT$LAYOUT.withName("fail_on"),
        Constants$root.C_INT$LAYOUT.withName("fail"),
        Constants$root.C_INT$LAYOUT.withName("sequential"),
        Constants$root.C_POINTER$LAYOUT.withName("out"),
        Constants$root.C_POINTER$LAYOUT.withName("real"),
        Constants$root.C_INT$LAYOUT.withName("nocache"),
        Constants$root.C_INT$LAYOUT.withName("disc"),
        Constants$root.C_INT$LAYOUT.withName("error"),
        MemoryLayout.paddingLayout(32)
    ).withName("_VipsForeignLoad");
    public static MemoryLayout $LAYOUT() {
        return _VipsForeignLoad.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    static final VarHandle memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("memory"));
    public static VarHandle memory$VH() {
        return _VipsForeignLoad.memory$VH;
    }
    public static int memory$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.memory$VH.get(seg);
    }
    public static void memory$set( MemorySegment seg, int x) {
        _VipsForeignLoad.memory$VH.set(seg, x);
    }
    public static int memory$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void memory$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle access$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("access"));
    public static VarHandle access$VH() {
        return _VipsForeignLoad.access$VH;
    }
    public static int access$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.access$VH.get(seg);
    }
    public static void access$set( MemorySegment seg, int x) {
        _VipsForeignLoad.access$VH.set(seg, x);
    }
    public static int access$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.access$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void access$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.access$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _VipsForeignLoad.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        _VipsForeignLoad.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fail_on$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fail_on"));
    public static VarHandle fail_on$VH() {
        return _VipsForeignLoad.fail_on$VH;
    }
    public static int fail_on$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.fail_on$VH.get(seg);
    }
    public static void fail_on$set( MemorySegment seg, int x) {
        _VipsForeignLoad.fail_on$VH.set(seg, x);
    }
    public static int fail_on$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.fail_on$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fail_on$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.fail_on$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fail"));
    public static VarHandle fail$VH() {
        return _VipsForeignLoad.fail$VH;
    }
    public static int fail$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.fail$VH.get(seg);
    }
    public static void fail$set( MemorySegment seg, int x) {
        _VipsForeignLoad.fail$VH.set(seg, x);
    }
    public static int fail$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.fail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fail$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.fail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sequential$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sequential"));
    public static VarHandle sequential$VH() {
        return _VipsForeignLoad.sequential$VH;
    }
    public static int sequential$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.sequential$VH.get(seg);
    }
    public static void sequential$set( MemorySegment seg, int x) {
        _VipsForeignLoad.sequential$VH.set(seg, x);
    }
    public static int sequential$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.sequential$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sequential$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.sequential$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle out$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("out"));
    public static VarHandle out$VH() {
        return _VipsForeignLoad.out$VH;
    }
    public static MemoryAddress out$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoad.out$VH.get(seg);
    }
    public static void out$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoad.out$VH.set(seg, x);
    }
    public static MemoryAddress out$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoad.out$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void out$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoad.out$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle real$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("real"));
    public static VarHandle real$VH() {
        return _VipsForeignLoad.real$VH;
    }
    public static MemoryAddress real$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoad.real$VH.get(seg);
    }
    public static void real$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoad.real$VH.set(seg, x);
    }
    public static MemoryAddress real$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoad.real$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void real$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoad.real$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nocache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nocache"));
    public static VarHandle nocache$VH() {
        return _VipsForeignLoad.nocache$VH;
    }
    public static int nocache$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.nocache$VH.get(seg);
    }
    public static void nocache$set( MemorySegment seg, int x) {
        _VipsForeignLoad.nocache$VH.set(seg, x);
    }
    public static int nocache$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.nocache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nocache$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.nocache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle disc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disc"));
    public static VarHandle disc$VH() {
        return _VipsForeignLoad.disc$VH;
    }
    public static int disc$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.disc$VH.get(seg);
    }
    public static void disc$set( MemorySegment seg, int x) {
        _VipsForeignLoad.disc$VH.set(seg, x);
    }
    public static int disc$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.disc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disc$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.disc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return _VipsForeignLoad.error$VH;
    }
    public static int error$get(MemorySegment seg) {
        return (int)_VipsForeignLoad.error$VH.get(seg);
    }
    public static void error$set( MemorySegment seg, int x) {
        _VipsForeignLoad.error$VH.set(seg, x);
    }
    public static int error$get(MemorySegment seg, long index) {
        return (int)_VipsForeignLoad.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, int x) {
        _VipsForeignLoad.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


