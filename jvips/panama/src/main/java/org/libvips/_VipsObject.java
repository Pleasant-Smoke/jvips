/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsObject {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("g_class")
            ).withName("g_type_instance"),
            Constants$root.C_INT$LAYOUT.withName("ref_count"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("qdata")
        ).withName("parent_instance"),
        Constants$root.C_INT$LAYOUT.withName("constructed"),
        Constants$root.C_INT$LAYOUT.withName("static_object"),
        Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
        Constants$root.C_POINTER$LAYOUT.withName("nickname"),
        Constants$root.C_POINTER$LAYOUT.withName("description"),
        Constants$root.C_INT$LAYOUT.withName("preclose"),
        Constants$root.C_INT$LAYOUT.withName("close"),
        Constants$root.C_INT$LAYOUT.withName("postclose"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
    ).withName("_VipsObject");
    public static MemoryLayout $LAYOUT() {
        return _VipsObject.$struct$LAYOUT;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle constructed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("constructed"));
    public static VarHandle constructed$VH() {
        return _VipsObject.constructed$VH;
    }
    public static int constructed$get(MemorySegment seg) {
        return (int)_VipsObject.constructed$VH.get(seg);
    }
    public static void constructed$set( MemorySegment seg, int x) {
        _VipsObject.constructed$VH.set(seg, x);
    }
    public static int constructed$get(MemorySegment seg, long index) {
        return (int)_VipsObject.constructed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void constructed$set(MemorySegment seg, long index, int x) {
        _VipsObject.constructed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle static_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("static_object"));
    public static VarHandle static_object$VH() {
        return _VipsObject.static_object$VH;
    }
    public static int static_object$get(MemorySegment seg) {
        return (int)_VipsObject.static_object$VH.get(seg);
    }
    public static void static_object$set( MemorySegment seg, int x) {
        _VipsObject.static_object$VH.set(seg, x);
    }
    public static int static_object$get(MemorySegment seg, long index) {
        return (int)_VipsObject.static_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void static_object$set(MemorySegment seg, long index, int x) {
        _VipsObject.static_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle argument_table$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("argument_table"));
    public static VarHandle argument_table$VH() {
        return _VipsObject.argument_table$VH;
    }
    public static MemoryAddress argument_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.argument_table$VH.get(seg);
    }
    public static void argument_table$set( MemorySegment seg, MemoryAddress x) {
        _VipsObject.argument_table$VH.set(seg, x);
    }
    public static MemoryAddress argument_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.argument_table$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void argument_table$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsObject.argument_table$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nickname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nickname"));
    public static VarHandle nickname$VH() {
        return _VipsObject.nickname$VH;
    }
    public static MemoryAddress nickname$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.nickname$VH.get(seg);
    }
    public static void nickname$set( MemorySegment seg, MemoryAddress x) {
        _VipsObject.nickname$VH.set(seg, x);
    }
    public static MemoryAddress nickname$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.nickname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nickname$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsObject.nickname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("description"));
    public static VarHandle description$VH() {
        return _VipsObject.description$VH;
    }
    public static MemoryAddress description$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.description$VH.get(seg);
    }
    public static void description$set( MemorySegment seg, MemoryAddress x) {
        _VipsObject.description$VH.set(seg, x);
    }
    public static MemoryAddress description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsObject.description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void description$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsObject.description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle preclose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preclose"));
    public static VarHandle preclose$VH() {
        return _VipsObject.preclose$VH;
    }
    public static int preclose$get(MemorySegment seg) {
        return (int)_VipsObject.preclose$VH.get(seg);
    }
    public static void preclose$set( MemorySegment seg, int x) {
        _VipsObject.preclose$VH.set(seg, x);
    }
    public static int preclose$get(MemorySegment seg, long index) {
        return (int)_VipsObject.preclose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preclose$set(MemorySegment seg, long index, int x) {
        _VipsObject.preclose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close"));
    public static VarHandle close$VH() {
        return _VipsObject.close$VH;
    }
    public static int close$get(MemorySegment seg) {
        return (int)_VipsObject.close$VH.get(seg);
    }
    public static void close$set( MemorySegment seg, int x) {
        _VipsObject.close$VH.set(seg, x);
    }
    public static int close$get(MemorySegment seg, long index) {
        return (int)_VipsObject.close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, int x) {
        _VipsObject.close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle postclose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("postclose"));
    public static VarHandle postclose$VH() {
        return _VipsObject.postclose$VH;
    }
    public static int postclose$get(MemorySegment seg) {
        return (int)_VipsObject.postclose$VH.get(seg);
    }
    public static void postclose$set( MemorySegment seg, int x) {
        _VipsObject.postclose$VH.set(seg, x);
    }
    public static int postclose$get(MemorySegment seg, long index) {
        return (int)_VipsObject.postclose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void postclose$set(MemorySegment seg, long index, int x) {
        _VipsObject.postclose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle local_memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("local_memory"));
    public static VarHandle local_memory$VH() {
        return _VipsObject.local_memory$VH;
    }
    public static long local_memory$get(MemorySegment seg) {
        return (long)_VipsObject.local_memory$VH.get(seg);
    }
    public static void local_memory$set( MemorySegment seg, long x) {
        _VipsObject.local_memory$VH.set(seg, x);
    }
    public static long local_memory$get(MemorySegment seg, long index) {
        return (long)_VipsObject.local_memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void local_memory$set(MemorySegment seg, long index, long x) {
        _VipsObject.local_memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


