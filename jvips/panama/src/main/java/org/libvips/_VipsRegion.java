/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsRegion {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                ).withName("g_type_instance"),
                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("qdata")
            ).withName("parent_instance"),
            Constants$root.C_INT$LAYOUT.withName("constructed"),
            Constants$root.C_INT$LAYOUT.withName("static_object"),
            Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
            Constants$root.C_POINTER$LAYOUT.withName("nickname"),
            Constants$root.C_POINTER$LAYOUT.withName("description"),
            Constants$root.C_INT$LAYOUT.withName("preclose"),
            Constants$root.C_INT$LAYOUT.withName("close"),
            Constants$root.C_INT$LAYOUT.withName("postclose"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
        ).withName("parent_object"),
        Constants$root.C_POINTER$LAYOUT.withName("im"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("left"),
            Constants$root.C_INT$LAYOUT.withName("top"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("valid"),
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_INT$LAYOUT.withName("bpl"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("seq"),
        Constants$root.C_POINTER$LAYOUT.withName("thread"),
        Constants$root.C_POINTER$LAYOUT.withName("window"),
        Constants$root.C_POINTER$LAYOUT.withName("buffer"),
        Constants$root.C_INT$LAYOUT.withName("invalid"),
        MemoryLayout.paddingLayout(32)
    ).withName("_VipsRegion");
    public static MemoryLayout $LAYOUT() {
        return _VipsRegion.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    static final VarHandle im$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("im"));
    public static VarHandle im$VH() {
        return _VipsRegion.im$VH;
    }
    public static MemoryAddress im$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.im$VH.get(seg);
    }
    public static void im$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.im$VH.set(seg, x);
    }
    public static MemoryAddress im$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.im$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void im$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.im$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment valid$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _VipsRegion.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_VipsRegion.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _VipsRegion.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_VipsRegion.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _VipsRegion.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _VipsRegion.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bpl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bpl"));
    public static VarHandle bpl$VH() {
        return _VipsRegion.bpl$VH;
    }
    public static int bpl$get(MemorySegment seg) {
        return (int)_VipsRegion.bpl$VH.get(seg);
    }
    public static void bpl$set( MemorySegment seg, int x) {
        _VipsRegion.bpl$VH.set(seg, x);
    }
    public static int bpl$get(MemorySegment seg, long index) {
        return (int)_VipsRegion.bpl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bpl$set(MemorySegment seg, long index, int x) {
        _VipsRegion.bpl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle seq$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seq"));
    public static VarHandle seq$VH() {
        return _VipsRegion.seq$VH;
    }
    public static MemoryAddress seq$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.seq$VH.get(seg);
    }
    public static void seq$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.seq$VH.set(seg, x);
    }
    public static MemoryAddress seq$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.seq$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seq$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.seq$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle thread$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread"));
    public static VarHandle thread$VH() {
        return _VipsRegion.thread$VH;
    }
    public static MemoryAddress thread$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.thread$VH.get(seg);
    }
    public static void thread$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.thread$VH.set(seg, x);
    }
    public static MemoryAddress thread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.thread$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.thread$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return _VipsRegion.window$VH;
    }
    public static MemoryAddress window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.window$VH.set(seg, x);
    }
    public static MemoryAddress window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer"));
    public static VarHandle buffer$VH() {
        return _VipsRegion.buffer$VH;
    }
    public static MemoryAddress buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.buffer$VH.get(seg);
    }
    public static void buffer$set( MemorySegment seg, MemoryAddress x) {
        _VipsRegion.buffer$VH.set(seg, x);
    }
    public static MemoryAddress buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsRegion.buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsRegion.buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle invalid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("invalid"));
    public static VarHandle invalid$VH() {
        return _VipsRegion.invalid$VH;
    }
    public static int invalid$get(MemorySegment seg) {
        return (int)_VipsRegion.invalid$VH.get(seg);
    }
    public static void invalid$set( MemorySegment seg, int x) {
        _VipsRegion.invalid$VH.set(seg, x);
    }
    public static int invalid$get(MemorySegment seg, long index) {
        return (int)_VipsRegion.invalid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void invalid$set(MemorySegment seg, long index, int x) {
        _VipsRegion.invalid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


