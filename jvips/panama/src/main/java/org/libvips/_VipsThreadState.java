/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsThreadState {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                ).withName("g_type_instance"),
                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("qdata")
            ).withName("parent_instance"),
            Constants$root.C_INT$LAYOUT.withName("constructed"),
            Constants$root.C_INT$LAYOUT.withName("static_object"),
            Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
            Constants$root.C_POINTER$LAYOUT.withName("nickname"),
            Constants$root.C_POINTER$LAYOUT.withName("description"),
            Constants$root.C_INT$LAYOUT.withName("preclose"),
            Constants$root.C_INT$LAYOUT.withName("close"),
            Constants$root.C_INT$LAYOUT.withName("postclose"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
        ).withName("parent_object"),
        Constants$root.C_POINTER$LAYOUT.withName("im"),
        Constants$root.C_POINTER$LAYOUT.withName("reg"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("left"),
            Constants$root.C_INT$LAYOUT.withName("top"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("pos"),
        Constants$root.C_INT$LAYOUT.withName("x"),
        Constants$root.C_INT$LAYOUT.withName("y"),
        Constants$root.C_INT$LAYOUT.withName("stop"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("a"),
        Constants$root.C_INT$LAYOUT.withName("stall"),
        MemoryLayout.paddingLayout(32)
    ).withName("_VipsThreadState");
    public static MemoryLayout $LAYOUT() {
        return _VipsThreadState.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    static final VarHandle im$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("im"));
    public static VarHandle im$VH() {
        return _VipsThreadState.im$VH;
    }
    public static MemoryAddress im$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.im$VH.get(seg);
    }
    public static void im$set( MemorySegment seg, MemoryAddress x) {
        _VipsThreadState.im$VH.set(seg, x);
    }
    public static MemoryAddress im$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.im$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void im$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsThreadState.im$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reg"));
    public static VarHandle reg$VH() {
        return _VipsThreadState.reg$VH;
    }
    public static MemoryAddress reg$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.reg$VH.get(seg);
    }
    public static void reg$set( MemorySegment seg, MemoryAddress x) {
        _VipsThreadState.reg$VH.set(seg, x);
    }
    public static MemoryAddress reg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.reg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reg$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsThreadState.reg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pos$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return _VipsThreadState.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)_VipsThreadState.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        _VipsThreadState.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)_VipsThreadState.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        _VipsThreadState.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return _VipsThreadState.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)_VipsThreadState.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        _VipsThreadState.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)_VipsThreadState.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        _VipsThreadState.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stop$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stop"));
    public static VarHandle stop$VH() {
        return _VipsThreadState.stop$VH;
    }
    public static int stop$get(MemorySegment seg) {
        return (int)_VipsThreadState.stop$VH.get(seg);
    }
    public static void stop$set( MemorySegment seg, int x) {
        _VipsThreadState.stop$VH.set(seg, x);
    }
    public static int stop$get(MemorySegment seg, long index) {
        return (int)_VipsThreadState.stop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop$set(MemorySegment seg, long index, int x) {
        _VipsThreadState.stop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle a$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("a"));
    public static VarHandle a$VH() {
        return _VipsThreadState.a$VH;
    }
    public static MemoryAddress a$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.a$VH.get(seg);
    }
    public static void a$set( MemorySegment seg, MemoryAddress x) {
        _VipsThreadState.a$VH.set(seg, x);
    }
    public static MemoryAddress a$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsThreadState.a$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void a$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsThreadState.a$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stall"));
    public static VarHandle stall$VH() {
        return _VipsThreadState.stall$VH;
    }
    public static int stall$get(MemorySegment seg) {
        return (int)_VipsThreadState.stall$VH.get(seg);
    }
    public static void stall$set( MemorySegment seg, int x) {
        _VipsThreadState.stall$VH.set(seg, x);
    }
    public static int stall$get(MemorySegment seg, long index) {
        return (int)_VipsThreadState.stall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stall$set(MemorySegment seg, long index, int x) {
        _VipsThreadState.stall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


