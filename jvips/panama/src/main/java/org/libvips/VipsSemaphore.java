/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class VipsSemaphore {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_INT$LAYOUT.withName("v"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("mutex"),
        Constants$root.C_POINTER$LAYOUT.withName("cond")
    );
    public static MemoryLayout $LAYOUT() {
        return VipsSemaphore.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return VipsSemaphore.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        VipsSemaphore.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        VipsSemaphore.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle v$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("v"));
    public static VarHandle v$VH() {
        return VipsSemaphore.v$VH;
    }
    public static int v$get(MemorySegment seg) {
        return (int)VipsSemaphore.v$VH.get(seg);
    }
    public static void v$set( MemorySegment seg, int x) {
        VipsSemaphore.v$VH.set(seg, x);
    }
    public static int v$get(MemorySegment seg, long index) {
        return (int)VipsSemaphore.v$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void v$set(MemorySegment seg, long index, int x) {
        VipsSemaphore.v$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mutex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex"));
    public static VarHandle mutex$VH() {
        return VipsSemaphore.mutex$VH;
    }
    public static MemoryAddress mutex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.mutex$VH.get(seg);
    }
    public static void mutex$set( MemorySegment seg, MemoryAddress x) {
        VipsSemaphore.mutex$VH.set(seg, x);
    }
    public static MemoryAddress mutex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.mutex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex$set(MemorySegment seg, long index, MemoryAddress x) {
        VipsSemaphore.mutex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cond$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond"));
    public static VarHandle cond$VH() {
        return VipsSemaphore.cond$VH;
    }
    public static MemoryAddress cond$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.cond$VH.get(seg);
    }
    public static void cond$set( MemorySegment seg, MemoryAddress x) {
        VipsSemaphore.cond$VH.set(seg, x);
    }
    public static MemoryAddress cond$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)VipsSemaphore.cond$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond$set(MemorySegment seg, long index, MemoryAddress x) {
        VipsSemaphore.cond$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


