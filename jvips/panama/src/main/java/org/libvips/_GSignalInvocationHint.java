/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GSignalInvocationHint {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("signal_id"),
        Constants$root.C_INT$LAYOUT.withName("detail"),
        Constants$root.C_INT$LAYOUT.withName("run_type")
    ).withName("_GSignalInvocationHint");
    public static MemoryLayout $LAYOUT() {
        return _GSignalInvocationHint.$struct$LAYOUT;
    }
    static final VarHandle signal_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signal_id"));
    public static VarHandle signal_id$VH() {
        return _GSignalInvocationHint.signal_id$VH;
    }
    public static int signal_id$get(MemorySegment seg) {
        return (int)_GSignalInvocationHint.signal_id$VH.get(seg);
    }
    public static void signal_id$set( MemorySegment seg, int x) {
        _GSignalInvocationHint.signal_id$VH.set(seg, x);
    }
    public static int signal_id$get(MemorySegment seg, long index) {
        return (int)_GSignalInvocationHint.signal_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signal_id$set(MemorySegment seg, long index, int x) {
        _GSignalInvocationHint.signal_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle detail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("detail"));
    public static VarHandle detail$VH() {
        return _GSignalInvocationHint.detail$VH;
    }
    public static int detail$get(MemorySegment seg) {
        return (int)_GSignalInvocationHint.detail$VH.get(seg);
    }
    public static void detail$set( MemorySegment seg, int x) {
        _GSignalInvocationHint.detail$VH.set(seg, x);
    }
    public static int detail$get(MemorySegment seg, long index) {
        return (int)_GSignalInvocationHint.detail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void detail$set(MemorySegment seg, long index, int x) {
        _GSignalInvocationHint.detail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle run_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("run_type"));
    public static VarHandle run_type$VH() {
        return _GSignalInvocationHint.run_type$VH;
    }
    public static int run_type$get(MemorySegment seg) {
        return (int)_GSignalInvocationHint.run_type$VH.get(seg);
    }
    public static void run_type$set( MemorySegment seg, int x) {
        _GSignalInvocationHint.run_type$VH.set(seg, x);
    }
    public static int run_type$get(MemorySegment seg, long index) {
        return (int)_GSignalInvocationHint.run_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void run_type$set(MemorySegment seg, long index, int x) {
        _GSignalInvocationHint.run_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


