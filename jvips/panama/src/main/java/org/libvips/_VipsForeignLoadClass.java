/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsForeignLoadClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                        ).withName("g_type_class"),
                        Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                        Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                        Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                        Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                        Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                        Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                        Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                        Constants$root.C_POINTER$LAYOUT.withName("notify"),
                        Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
                        Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
                        MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                    ).withName("parent_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("build"),
                    Constants$root.C_POINTER$LAYOUT.withName("postbuild"),
                    Constants$root.C_POINTER$LAYOUT.withName("summary_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("summary"),
                    Constants$root.C_POINTER$LAYOUT.withName("dump"),
                    Constants$root.C_POINTER$LAYOUT.withName("sanity"),
                    Constants$root.C_POINTER$LAYOUT.withName("rewind"),
                    Constants$root.C_POINTER$LAYOUT.withName("preclose"),
                    Constants$root.C_POINTER$LAYOUT.withName("close"),
                    Constants$root.C_POINTER$LAYOUT.withName("postclose"),
                    Constants$root.C_POINTER$LAYOUT.withName("new_from_string"),
                    Constants$root.C_POINTER$LAYOUT.withName("to_string"),
                    Constants$root.C_INT$LAYOUT.withName("output_needs_arg"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("output_to_arg"),
                    Constants$root.C_POINTER$LAYOUT.withName("nickname"),
                    Constants$root.C_POINTER$LAYOUT.withName("description"),
                    Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
                    Constants$root.C_POINTER$LAYOUT.withName("argument_table_traverse"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("argument_table_traverse_gtype"),
                    Constants$root.C_INT$LAYOUT.withName("deprecated"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("_vips_reserved1"),
                    Constants$root.C_POINTER$LAYOUT.withName("_vips_reserved2"),
                    Constants$root.C_POINTER$LAYOUT.withName("_vips_reserved3"),
                    Constants$root.C_POINTER$LAYOUT.withName("_vips_reserved4")
                ).withName("parent_class"),
                Constants$root.C_POINTER$LAYOUT.withName("usage"),
                Constants$root.C_POINTER$LAYOUT.withName("get_flags"),
                Constants$root.C_INT$LAYOUT.withName("flags"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("invalidate")
            ).withName("parent_class"),
            Constants$root.C_INT$LAYOUT.withName("priority"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("suffs")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("is_a"),
        Constants$root.C_POINTER$LAYOUT.withName("is_a_buffer"),
        Constants$root.C_POINTER$LAYOUT.withName("is_a_source"),
        Constants$root.C_POINTER$LAYOUT.withName("get_flags_filename"),
        Constants$root.C_POINTER$LAYOUT.withName("get_flags"),
        Constants$root.C_POINTER$LAYOUT.withName("header"),
        Constants$root.C_POINTER$LAYOUT.withName("load")
    ).withName("_VipsForeignLoadClass");
    public static MemoryLayout $LAYOUT() {
        return _VipsForeignLoadClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 376);
    }
    static final FunctionDescriptor is_a$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_a$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.is_a$FUNC
    );
    public interface is_a {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_a fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_a.class, fi, _VipsForeignLoadClass.is_a$FUNC, session);
        }
        static is_a ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.is_a$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_a$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_a"));
    public static VarHandle is_a$VH() {
        return _VipsForeignLoadClass.is_a$VH;
    }
    public static MemoryAddress is_a$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a$VH.get(seg);
    }
    public static void is_a$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.is_a$VH.set(seg, x);
    }
    public static MemoryAddress is_a$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_a$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.is_a$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_a is_a (MemorySegment segment, MemorySession session) {
        return is_a.ofAddress(is_a$get(segment), session);
    }
    static final FunctionDescriptor is_a_buffer$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle is_a_buffer$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.is_a_buffer$FUNC
    );
    public interface is_a_buffer {

        int apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(is_a_buffer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_a_buffer.class, fi, _VipsForeignLoadClass.is_a_buffer$FUNC, session);
        }
        static is_a_buffer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (int)_VipsForeignLoadClass.is_a_buffer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_a_buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_a_buffer"));
    public static VarHandle is_a_buffer$VH() {
        return _VipsForeignLoadClass.is_a_buffer$VH;
    }
    public static MemoryAddress is_a_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a_buffer$VH.get(seg);
    }
    public static void is_a_buffer$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.is_a_buffer$VH.set(seg, x);
    }
    public static MemoryAddress is_a_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_a_buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.is_a_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_a_buffer is_a_buffer (MemorySegment segment, MemorySession session) {
        return is_a_buffer.ofAddress(is_a_buffer$get(segment), session);
    }
    static final FunctionDescriptor is_a_source$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_a_source$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.is_a_source$FUNC
    );
    public interface is_a_source {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_a_source fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_a_source.class, fi, _VipsForeignLoadClass.is_a_source$FUNC, session);
        }
        static is_a_source ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.is_a_source$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_a_source$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_a_source"));
    public static VarHandle is_a_source$VH() {
        return _VipsForeignLoadClass.is_a_source$VH;
    }
    public static MemoryAddress is_a_source$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a_source$VH.get(seg);
    }
    public static void is_a_source$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.is_a_source$VH.set(seg, x);
    }
    public static MemoryAddress is_a_source$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.is_a_source$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_a_source$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.is_a_source$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_a_source is_a_source (MemorySegment segment, MemorySession session) {
        return is_a_source.ofAddress(is_a_source$get(segment), session);
    }
    static final FunctionDescriptor get_flags_filename$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_flags_filename$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.get_flags_filename$FUNC
    );
    public interface get_flags_filename {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_flags_filename fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_flags_filename.class, fi, _VipsForeignLoadClass.get_flags_filename$FUNC, session);
        }
        static get_flags_filename ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.get_flags_filename$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_flags_filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_flags_filename"));
    public static VarHandle get_flags_filename$VH() {
        return _VipsForeignLoadClass.get_flags_filename$VH;
    }
    public static MemoryAddress get_flags_filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.get_flags_filename$VH.get(seg);
    }
    public static void get_flags_filename$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.get_flags_filename$VH.set(seg, x);
    }
    public static MemoryAddress get_flags_filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.get_flags_filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_flags_filename$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.get_flags_filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_flags_filename get_flags_filename (MemorySegment segment, MemorySession session) {
        return get_flags_filename.ofAddress(get_flags_filename$get(segment), session);
    }
    static final FunctionDescriptor get_flags$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_flags$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.get_flags$FUNC
    );
    public interface get_flags {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_flags fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_flags.class, fi, _VipsForeignLoadClass.get_flags$FUNC, session);
        }
        static get_flags ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.get_flags$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_flags"));
    public static VarHandle get_flags$VH() {
        return _VipsForeignLoadClass.get_flags$VH;
    }
    public static MemoryAddress get_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.get_flags$VH.get(seg);
    }
    public static void get_flags$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.get_flags$VH.set(seg, x);
    }
    public static MemoryAddress get_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.get_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_flags$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.get_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_flags get_flags (MemorySegment segment, MemorySession session) {
        return get_flags.ofAddress(get_flags$get(segment), session);
    }
    static final FunctionDescriptor header$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle header$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.header$FUNC
    );
    public interface header {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(header fi, MemorySession session) {
            return RuntimeHelper.upcallStub(header.class, fi, _VipsForeignLoadClass.header$FUNC, session);
        }
        static header ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.header$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("header"));
    public static VarHandle header$VH() {
        return _VipsForeignLoadClass.header$VH;
    }
    public static MemoryAddress header$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.header$VH.get(seg);
    }
    public static void header$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.header$VH.set(seg, x);
    }
    public static MemoryAddress header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void header$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static header header (MemorySegment segment, MemorySession session) {
        return header.ofAddress(header$get(segment), session);
    }
    static final FunctionDescriptor load$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load$MH = RuntimeHelper.downcallHandle(
        _VipsForeignLoadClass.load$FUNC
    );
    public interface load {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(load fi, MemorySession session) {
            return RuntimeHelper.upcallStub(load.class, fi, _VipsForeignLoadClass.load$FUNC, session);
        }
        static load ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_VipsForeignLoadClass.load$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load"));
    public static VarHandle load$VH() {
        return _VipsForeignLoadClass.load$VH;
    }
    public static MemoryAddress load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.load$VH.get(seg);
    }
    public static void load$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignLoadClass.load$VH.set(seg, x);
    }
    public static MemoryAddress load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignLoadClass.load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignLoadClass.load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load load (MemorySegment segment, MemorySession session) {
        return load.ofAddress(load$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


