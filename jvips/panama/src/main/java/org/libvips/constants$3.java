/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$3 {

    static final FunctionDescriptor g_mem_set_vtable$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_mem_set_vtable$MH = RuntimeHelper.downcallHandle(
        "g_mem_set_vtable",
        constants$3.g_mem_set_vtable$FUNC
    );
    static final FunctionDescriptor g_mem_is_system_malloc$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle g_mem_is_system_malloc$MH = RuntimeHelper.downcallHandle(
        "g_mem_is_system_malloc",
        constants$3.g_mem_is_system_malloc$FUNC
    );
    static final  OfInt g_mem_gc_friendly$LAYOUT = Constants$root.C_INT$LAYOUT;
    static final VarHandle g_mem_gc_friendly$VH = constants$3.g_mem_gc_friendly$LAYOUT.varHandle();
    static final MemorySegment g_mem_gc_friendly$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_mem_gc_friendly", constants$3.g_mem_gc_friendly$LAYOUT);
    static final  OfAddress glib_mem_profiler_table$LAYOUT = Constants$root.C_POINTER$LAYOUT;
    static final VarHandle glib_mem_profiler_table$VH = constants$3.glib_mem_profiler_table$LAYOUT.varHandle();
    static final MemorySegment glib_mem_profiler_table$SEGMENT = RuntimeHelper.lookupGlobalVariable("glib_mem_profiler_table", constants$3.glib_mem_profiler_table$LAYOUT);
    static final FunctionDescriptor g_mem_profile$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle g_mem_profile$MH = RuntimeHelper.downcallHandle(
        "g_mem_profile",
        constants$3.g_mem_profile$FUNC
    );
    static final FunctionDescriptor g_type_init$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle g_type_init$MH = RuntimeHelper.downcallHandle(
        "g_type_init",
        constants$3.g_type_init$FUNC
    );
}


