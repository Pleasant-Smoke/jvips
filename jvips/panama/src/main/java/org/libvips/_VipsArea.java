/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsArea {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length"),
        Constants$root.C_INT$LAYOUT.withName("n"),
        Constants$root.C_INT$LAYOUT.withName("count"),
        Constants$root.C_POINTER$LAYOUT.withName("lock"),
        Constants$root.C_POINTER$LAYOUT.withName("free_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("client"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("type"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sizeof_type")
    ).withName("_VipsArea");
    public static MemoryLayout $LAYOUT() {
        return _VipsArea.$struct$LAYOUT;
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _VipsArea.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _VipsArea.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsArea.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _VipsArea.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)_VipsArea.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        _VipsArea.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)_VipsArea.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        _VipsArea.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n"));
    public static VarHandle n$VH() {
        return _VipsArea.n$VH;
    }
    public static int n$get(MemorySegment seg) {
        return (int)_VipsArea.n$VH.get(seg);
    }
    public static void n$set( MemorySegment seg, int x) {
        _VipsArea.n$VH.set(seg, x);
    }
    public static int n$get(MemorySegment seg, long index) {
        return (int)_VipsArea.n$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n$set(MemorySegment seg, long index, int x) {
        _VipsArea.n$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return _VipsArea.count$VH;
    }
    public static int count$get(MemorySegment seg) {
        return (int)_VipsArea.count$VH.get(seg);
    }
    public static void count$set( MemorySegment seg, int x) {
        _VipsArea.count$VH.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)_VipsArea.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        _VipsArea.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lock"));
    public static VarHandle lock$VH() {
        return _VipsArea.lock$VH;
    }
    public static MemoryAddress lock$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.lock$VH.get(seg);
    }
    public static void lock$set( MemorySegment seg, MemoryAddress x) {
        _VipsArea.lock$VH.set(seg, x);
    }
    public static MemoryAddress lock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.lock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lock$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsArea.lock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle free_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free_fn"));
    public static VarHandle free_fn$VH() {
        return _VipsArea.free_fn$VH;
    }
    public static MemoryAddress free_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.free_fn$VH.get(seg);
    }
    public static void free_fn$set( MemorySegment seg, MemoryAddress x) {
        _VipsArea.free_fn$VH.set(seg, x);
    }
    public static MemoryAddress free_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.free_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsArea.free_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static VipsCallbackFn free_fn (MemorySegment segment, MemorySession session) {
        return VipsCallbackFn.ofAddress(free_fn$get(segment), session);
    }
    static final VarHandle client$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("client"));
    public static VarHandle client$VH() {
        return _VipsArea.client$VH;
    }
    public static MemoryAddress client$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.client$VH.get(seg);
    }
    public static void client$set( MemorySegment seg, MemoryAddress x) {
        _VipsArea.client$VH.set(seg, x);
    }
    public static MemoryAddress client$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsArea.client$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void client$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsArea.client$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _VipsArea.type$VH;
    }
    public static long type$get(MemorySegment seg) {
        return (long)_VipsArea.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, long x) {
        _VipsArea.type$VH.set(seg, x);
    }
    public static long type$get(MemorySegment seg, long index) {
        return (long)_VipsArea.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, long x) {
        _VipsArea.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sizeof_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sizeof_type"));
    public static VarHandle sizeof_type$VH() {
        return _VipsArea.sizeof_type$VH;
    }
    public static long sizeof_type$get(MemorySegment seg) {
        return (long)_VipsArea.sizeof_type$VH.get(seg);
    }
    public static void sizeof_type$set( MemorySegment seg, long x) {
        _VipsArea.sizeof_type$VH.set(seg, x);
    }
    public static long sizeof_type$get(MemorySegment seg, long index) {
        return (long)_VipsArea.sizeof_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sizeof_type$set(MemorySegment seg, long index, long x) {
        _VipsArea.sizeof_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


