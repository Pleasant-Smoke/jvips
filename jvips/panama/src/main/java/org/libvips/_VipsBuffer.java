/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsBuffer {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ref_count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("im"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("left"),
            Constants$root.C_INT$LAYOUT.withName("top"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("area"),
        Constants$root.C_INT$LAYOUT.withName("done"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("cache"),
        Constants$root.C_POINTER$LAYOUT.withName("buf"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bsize")
    ).withName("_VipsBuffer");
    public static MemoryLayout $LAYOUT() {
        return _VipsBuffer.$struct$LAYOUT;
    }
    static final VarHandle ref_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_count"));
    public static VarHandle ref_count$VH() {
        return _VipsBuffer.ref_count$VH;
    }
    public static int ref_count$get(MemorySegment seg) {
        return (int)_VipsBuffer.ref_count$VH.get(seg);
    }
    public static void ref_count$set( MemorySegment seg, int x) {
        _VipsBuffer.ref_count$VH.set(seg, x);
    }
    public static int ref_count$get(MemorySegment seg, long index) {
        return (int)_VipsBuffer.ref_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_count$set(MemorySegment seg, long index, int x) {
        _VipsBuffer.ref_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle im$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("im"));
    public static VarHandle im$VH() {
        return _VipsBuffer.im$VH;
    }
    public static MemoryAddress im$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.im$VH.get(seg);
    }
    public static void im$set( MemorySegment seg, MemoryAddress x) {
        _VipsBuffer.im$VH.set(seg, x);
    }
    public static MemoryAddress im$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.im$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void im$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsBuffer.im$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment area$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle done$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("done"));
    public static VarHandle done$VH() {
        return _VipsBuffer.done$VH;
    }
    public static int done$get(MemorySegment seg) {
        return (int)_VipsBuffer.done$VH.get(seg);
    }
    public static void done$set( MemorySegment seg, int x) {
        _VipsBuffer.done$VH.set(seg, x);
    }
    public static int done$get(MemorySegment seg, long index) {
        return (int)_VipsBuffer.done$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void done$set(MemorySegment seg, long index, int x) {
        _VipsBuffer.done$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cache"));
    public static VarHandle cache$VH() {
        return _VipsBuffer.cache$VH;
    }
    public static MemoryAddress cache$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.cache$VH.get(seg);
    }
    public static void cache$set( MemorySegment seg, MemoryAddress x) {
        _VipsBuffer.cache$VH.set(seg, x);
    }
    public static MemoryAddress cache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.cache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cache$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsBuffer.cache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf"));
    public static VarHandle buf$VH() {
        return _VipsBuffer.buf$VH;
    }
    public static MemoryAddress buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.buf$VH.get(seg);
    }
    public static void buf$set( MemorySegment seg, MemoryAddress x) {
        _VipsBuffer.buf$VH.set(seg, x);
    }
    public static MemoryAddress buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsBuffer.buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsBuffer.buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bsize"));
    public static VarHandle bsize$VH() {
        return _VipsBuffer.bsize$VH;
    }
    public static long bsize$get(MemorySegment seg) {
        return (long)_VipsBuffer.bsize$VH.get(seg);
    }
    public static void bsize$set( MemorySegment seg, long x) {
        _VipsBuffer.bsize$VH.set(seg, x);
    }
    public static long bsize$get(MemorySegment seg, long index) {
        return (long)_VipsBuffer.bsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bsize$set(MemorySegment seg, long index, long x) {
        _VipsBuffer.bsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


