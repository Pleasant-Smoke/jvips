/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$132 {

    static final FunctionDescriptor vips_threadset_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_threadset_free$MH = RuntimeHelper.downcallHandle(
        "vips_threadset_free",
        constants$132.vips_threadset_free$FUNC
    );
    static final FunctionDescriptor vips_semaphore_up$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_semaphore_up$MH = RuntimeHelper.downcallHandle(
        "vips_semaphore_up",
        constants$132.vips_semaphore_up$FUNC
    );
    static final FunctionDescriptor vips_semaphore_upn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle vips_semaphore_upn$MH = RuntimeHelper.downcallHandle(
        "vips_semaphore_upn",
        constants$132.vips_semaphore_upn$FUNC
    );
    static final FunctionDescriptor vips_semaphore_down$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_semaphore_down$MH = RuntimeHelper.downcallHandle(
        "vips_semaphore_down",
        constants$132.vips_semaphore_down$FUNC
    );
    static final FunctionDescriptor vips_semaphore_downn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle vips_semaphore_downn$MH = RuntimeHelper.downcallHandle(
        "vips_semaphore_downn",
        constants$132.vips_semaphore_downn$FUNC
    );
    static final FunctionDescriptor vips_semaphore_down_timeout$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle vips_semaphore_down_timeout$MH = RuntimeHelper.downcallHandle(
        "vips_semaphore_down_timeout",
        constants$132.vips_semaphore_down_timeout$FUNC
    );
}


