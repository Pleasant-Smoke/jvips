/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsTarget {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("g_class")
                    ).withName("g_type_instance"),
                    Constants$root.C_INT$LAYOUT.withName("ref_count"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("qdata")
                ).withName("parent_instance"),
                Constants$root.C_INT$LAYOUT.withName("constructed"),
                Constants$root.C_INT$LAYOUT.withName("static_object"),
                Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
                Constants$root.C_POINTER$LAYOUT.withName("nickname"),
                Constants$root.C_POINTER$LAYOUT.withName("description"),
                Constants$root.C_INT$LAYOUT.withName("preclose"),
                Constants$root.C_INT$LAYOUT.withName("close"),
                Constants$root.C_INT$LAYOUT.withName("postclose"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
            ).withName("parent_object"),
            Constants$root.C_INT$LAYOUT.withName("descriptor"),
            Constants$root.C_INT$LAYOUT.withName("tracked_descriptor"),
            Constants$root.C_INT$LAYOUT.withName("close_descriptor"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("filename")
        ).withName("parent_object"),
        Constants$root.C_INT$LAYOUT.withName("memory"),
        Constants$root.C_INT$LAYOUT.withName("ended"),
        Constants$root.C_POINTER$LAYOUT.withName("memory_buffer"),
        Constants$root.C_POINTER$LAYOUT.withName("blob"),
        MemoryLayout.sequenceLayout(8500, Constants$root.C_CHAR$LAYOUT).withName("output_buffer"),
        Constants$root.C_INT$LAYOUT.withName("write_point"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("position"),
        Constants$root.C_INT$LAYOUT.withName("delete_on_close"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("delete_on_close_filename")
    ).withName("_VipsTarget");
    public static MemoryLayout $LAYOUT() {
        return _VipsTarget.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 104);
    }
    static final VarHandle memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("memory"));
    public static VarHandle memory$VH() {
        return _VipsTarget.memory$VH;
    }
    public static int memory$get(MemorySegment seg) {
        return (int)_VipsTarget.memory$VH.get(seg);
    }
    public static void memory$set( MemorySegment seg, int x) {
        _VipsTarget.memory$VH.set(seg, x);
    }
    public static int memory$get(MemorySegment seg, long index) {
        return (int)_VipsTarget.memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void memory$set(MemorySegment seg, long index, int x) {
        _VipsTarget.memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ended$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ended"));
    public static VarHandle ended$VH() {
        return _VipsTarget.ended$VH;
    }
    public static int ended$get(MemorySegment seg) {
        return (int)_VipsTarget.ended$VH.get(seg);
    }
    public static void ended$set( MemorySegment seg, int x) {
        _VipsTarget.ended$VH.set(seg, x);
    }
    public static int ended$get(MemorySegment seg, long index) {
        return (int)_VipsTarget.ended$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ended$set(MemorySegment seg, long index, int x) {
        _VipsTarget.ended$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle memory_buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("memory_buffer"));
    public static VarHandle memory_buffer$VH() {
        return _VipsTarget.memory_buffer$VH;
    }
    public static MemoryAddress memory_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.memory_buffer$VH.get(seg);
    }
    public static void memory_buffer$set( MemorySegment seg, MemoryAddress x) {
        _VipsTarget.memory_buffer$VH.set(seg, x);
    }
    public static MemoryAddress memory_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.memory_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void memory_buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsTarget.memory_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blob$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blob"));
    public static VarHandle blob$VH() {
        return _VipsTarget.blob$VH;
    }
    public static MemoryAddress blob$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.blob$VH.get(seg);
    }
    public static void blob$set( MemorySegment seg, MemoryAddress x) {
        _VipsTarget.blob$VH.set(seg, x);
    }
    public static MemoryAddress blob$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.blob$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blob$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsTarget.blob$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment output_buffer$slice(MemorySegment seg) {
        return seg.asSlice(128, 8500);
    }
    static final VarHandle write_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_point"));
    public static VarHandle write_point$VH() {
        return _VipsTarget.write_point$VH;
    }
    public static int write_point$get(MemorySegment seg) {
        return (int)_VipsTarget.write_point$VH.get(seg);
    }
    public static void write_point$set( MemorySegment seg, int x) {
        _VipsTarget.write_point$VH.set(seg, x);
    }
    public static int write_point$get(MemorySegment seg, long index) {
        return (int)_VipsTarget.write_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_point$set(MemorySegment seg, long index, int x) {
        _VipsTarget.write_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("position"));
    public static VarHandle position$VH() {
        return _VipsTarget.position$VH;
    }
    public static long position$get(MemorySegment seg) {
        return (long)_VipsTarget.position$VH.get(seg);
    }
    public static void position$set( MemorySegment seg, long x) {
        _VipsTarget.position$VH.set(seg, x);
    }
    public static long position$get(MemorySegment seg, long index) {
        return (long)_VipsTarget.position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void position$set(MemorySegment seg, long index, long x) {
        _VipsTarget.position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delete_on_close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_on_close"));
    public static VarHandle delete_on_close$VH() {
        return _VipsTarget.delete_on_close$VH;
    }
    public static int delete_on_close$get(MemorySegment seg) {
        return (int)_VipsTarget.delete_on_close$VH.get(seg);
    }
    public static void delete_on_close$set( MemorySegment seg, int x) {
        _VipsTarget.delete_on_close$VH.set(seg, x);
    }
    public static int delete_on_close$get(MemorySegment seg, long index) {
        return (int)_VipsTarget.delete_on_close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_on_close$set(MemorySegment seg, long index, int x) {
        _VipsTarget.delete_on_close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delete_on_close_filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_on_close_filename"));
    public static VarHandle delete_on_close_filename$VH() {
        return _VipsTarget.delete_on_close_filename$VH;
    }
    public static MemoryAddress delete_on_close_filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.delete_on_close_filename$VH.get(seg);
    }
    public static void delete_on_close_filename$set( MemorySegment seg, MemoryAddress x) {
        _VipsTarget.delete_on_close_filename$VH.set(seg, x);
    }
    public static MemoryAddress delete_on_close_filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsTarget.delete_on_close_filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_on_close_filename$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsTarget.delete_on_close_filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


