/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsSource {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("g_class")
                    ).withName("g_type_instance"),
                    Constants$root.C_INT$LAYOUT.withName("ref_count"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("qdata")
                ).withName("parent_instance"),
                Constants$root.C_INT$LAYOUT.withName("constructed"),
                Constants$root.C_INT$LAYOUT.withName("static_object"),
                Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
                Constants$root.C_POINTER$LAYOUT.withName("nickname"),
                Constants$root.C_POINTER$LAYOUT.withName("description"),
                Constants$root.C_INT$LAYOUT.withName("preclose"),
                Constants$root.C_INT$LAYOUT.withName("close"),
                Constants$root.C_INT$LAYOUT.withName("postclose"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
            ).withName("parent_object"),
            Constants$root.C_INT$LAYOUT.withName("descriptor"),
            Constants$root.C_INT$LAYOUT.withName("tracked_descriptor"),
            Constants$root.C_INT$LAYOUT.withName("close_descriptor"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("filename")
        ).withName("parent_object"),
        Constants$root.C_INT$LAYOUT.withName("decode"),
        Constants$root.C_INT$LAYOUT.withName("have_tested_seek"),
        Constants$root.C_INT$LAYOUT.withName("is_pipe"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("read_position"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length"),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_POINTER$LAYOUT.withName("header_bytes"),
        Constants$root.C_POINTER$LAYOUT.withName("sniff"),
        Constants$root.C_POINTER$LAYOUT.withName("blob"),
        Constants$root.C_POINTER$LAYOUT.withName("mmap_baseaddr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("mmap_length")
    ).withName("_VipsSource");
    public static MemoryLayout $LAYOUT() {
        return _VipsSource.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 104);
    }
    static final VarHandle decode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("decode"));
    public static VarHandle decode$VH() {
        return _VipsSource.decode$VH;
    }
    public static int decode$get(MemorySegment seg) {
        return (int)_VipsSource.decode$VH.get(seg);
    }
    public static void decode$set( MemorySegment seg, int x) {
        _VipsSource.decode$VH.set(seg, x);
    }
    public static int decode$get(MemorySegment seg, long index) {
        return (int)_VipsSource.decode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void decode$set(MemorySegment seg, long index, int x) {
        _VipsSource.decode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle have_tested_seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("have_tested_seek"));
    public static VarHandle have_tested_seek$VH() {
        return _VipsSource.have_tested_seek$VH;
    }
    public static int have_tested_seek$get(MemorySegment seg) {
        return (int)_VipsSource.have_tested_seek$VH.get(seg);
    }
    public static void have_tested_seek$set( MemorySegment seg, int x) {
        _VipsSource.have_tested_seek$VH.set(seg, x);
    }
    public static int have_tested_seek$get(MemorySegment seg, long index) {
        return (int)_VipsSource.have_tested_seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void have_tested_seek$set(MemorySegment seg, long index, int x) {
        _VipsSource.have_tested_seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_pipe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_pipe"));
    public static VarHandle is_pipe$VH() {
        return _VipsSource.is_pipe$VH;
    }
    public static int is_pipe$get(MemorySegment seg) {
        return (int)_VipsSource.is_pipe$VH.get(seg);
    }
    public static void is_pipe$set( MemorySegment seg, int x) {
        _VipsSource.is_pipe$VH.set(seg, x);
    }
    public static int is_pipe$get(MemorySegment seg, long index) {
        return (int)_VipsSource.is_pipe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_pipe$set(MemorySegment seg, long index, int x) {
        _VipsSource.is_pipe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle read_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_position"));
    public static VarHandle read_position$VH() {
        return _VipsSource.read_position$VH;
    }
    public static long read_position$get(MemorySegment seg) {
        return (long)_VipsSource.read_position$VH.get(seg);
    }
    public static void read_position$set( MemorySegment seg, long x) {
        _VipsSource.read_position$VH.set(seg, x);
    }
    public static long read_position$get(MemorySegment seg, long index) {
        return (long)_VipsSource.read_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_position$set(MemorySegment seg, long index, long x) {
        _VipsSource.read_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _VipsSource.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)_VipsSource.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        _VipsSource.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)_VipsSource.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        _VipsSource.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _VipsSource.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _VipsSource.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsSource.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle header_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("header_bytes"));
    public static VarHandle header_bytes$VH() {
        return _VipsSource.header_bytes$VH;
    }
    public static MemoryAddress header_bytes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.header_bytes$VH.get(seg);
    }
    public static void header_bytes$set( MemorySegment seg, MemoryAddress x) {
        _VipsSource.header_bytes$VH.set(seg, x);
    }
    public static MemoryAddress header_bytes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.header_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void header_bytes$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsSource.header_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sniff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sniff"));
    public static VarHandle sniff$VH() {
        return _VipsSource.sniff$VH;
    }
    public static MemoryAddress sniff$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.sniff$VH.get(seg);
    }
    public static void sniff$set( MemorySegment seg, MemoryAddress x) {
        _VipsSource.sniff$VH.set(seg, x);
    }
    public static MemoryAddress sniff$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.sniff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sniff$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsSource.sniff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blob$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blob"));
    public static VarHandle blob$VH() {
        return _VipsSource.blob$VH;
    }
    public static MemoryAddress blob$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.blob$VH.get(seg);
    }
    public static void blob$set( MemorySegment seg, MemoryAddress x) {
        _VipsSource.blob$VH.set(seg, x);
    }
    public static MemoryAddress blob$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.blob$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blob$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsSource.blob$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mmap_baseaddr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mmap_baseaddr"));
    public static VarHandle mmap_baseaddr$VH() {
        return _VipsSource.mmap_baseaddr$VH;
    }
    public static MemoryAddress mmap_baseaddr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.mmap_baseaddr$VH.get(seg);
    }
    public static void mmap_baseaddr$set( MemorySegment seg, MemoryAddress x) {
        _VipsSource.mmap_baseaddr$VH.set(seg, x);
    }
    public static MemoryAddress mmap_baseaddr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsSource.mmap_baseaddr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mmap_baseaddr$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsSource.mmap_baseaddr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mmap_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mmap_length"));
    public static VarHandle mmap_length$VH() {
        return _VipsSource.mmap_length$VH;
    }
    public static long mmap_length$get(MemorySegment seg) {
        return (long)_VipsSource.mmap_length$VH.get(seg);
    }
    public static void mmap_length$set( MemorySegment seg, long x) {
        _VipsSource.mmap_length$VH.set(seg, x);
    }
    public static long mmap_length$get(MemorySegment seg, long index) {
        return (long)_VipsSource.mmap_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mmap_length$set(MemorySegment seg, long index, long x) {
        _VipsSource.mmap_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


