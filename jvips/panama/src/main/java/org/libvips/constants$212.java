/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$212 {

    static final FunctionDescriptor vips_percent$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_percent$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_percent",
        constants$212.vips_percent$FUNC
    );
    static final FunctionDescriptor vips_stdif$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle vips_stdif$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_stdif",
        constants$212.vips_stdif$FUNC
    );
    static final FunctionDescriptor vips_hist_cum$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_hist_cum$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_hist_cum",
        constants$212.vips_hist_cum$FUNC
    );
    static final FunctionDescriptor vips_hist_norm$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_hist_norm$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_hist_norm",
        constants$212.vips_hist_norm$FUNC
    );
    static final FunctionDescriptor vips_hist_equal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_hist_equal$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_hist_equal",
        constants$212.vips_hist_equal$FUNC
    );
    static final FunctionDescriptor vips_hist_plot$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vips_hist_plot$MH = RuntimeHelper.downcallHandleVariadic(
        "vips_hist_plot",
        constants$212.vips_hist_plot$FUNC
    );
}


