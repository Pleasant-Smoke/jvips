/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsBuf {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("base"),
        Constants$root.C_INT$LAYOUT.withName("mx"),
        Constants$root.C_INT$LAYOUT.withName("i"),
        Constants$root.C_INT$LAYOUT.withName("full"),
        Constants$root.C_INT$LAYOUT.withName("lasti"),
        Constants$root.C_INT$LAYOUT.withName("dynamic"),
        MemoryLayout.paddingLayout(32)
    ).withName("_VipsBuf");
    public static MemoryLayout $LAYOUT() {
        return _VipsBuf.$struct$LAYOUT;
    }
    static final VarHandle base$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base"));
    public static VarHandle base$VH() {
        return _VipsBuf.base$VH;
    }
    public static MemoryAddress base$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsBuf.base$VH.get(seg);
    }
    public static void base$set( MemorySegment seg, MemoryAddress x) {
        _VipsBuf.base$VH.set(seg, x);
    }
    public static MemoryAddress base$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsBuf.base$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsBuf.base$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mx"));
    public static VarHandle mx$VH() {
        return _VipsBuf.mx$VH;
    }
    public static int mx$get(MemorySegment seg) {
        return (int)_VipsBuf.mx$VH.get(seg);
    }
    public static void mx$set( MemorySegment seg, int x) {
        _VipsBuf.mx$VH.set(seg, x);
    }
    public static int mx$get(MemorySegment seg, long index) {
        return (int)_VipsBuf.mx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mx$set(MemorySegment seg, long index, int x) {
        _VipsBuf.mx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle i$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("i"));
    public static VarHandle i$VH() {
        return _VipsBuf.i$VH;
    }
    public static int i$get(MemorySegment seg) {
        return (int)_VipsBuf.i$VH.get(seg);
    }
    public static void i$set( MemorySegment seg, int x) {
        _VipsBuf.i$VH.set(seg, x);
    }
    public static int i$get(MemorySegment seg, long index) {
        return (int)_VipsBuf.i$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void i$set(MemorySegment seg, long index, int x) {
        _VipsBuf.i$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle full$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("full"));
    public static VarHandle full$VH() {
        return _VipsBuf.full$VH;
    }
    public static int full$get(MemorySegment seg) {
        return (int)_VipsBuf.full$VH.get(seg);
    }
    public static void full$set( MemorySegment seg, int x) {
        _VipsBuf.full$VH.set(seg, x);
    }
    public static int full$get(MemorySegment seg, long index) {
        return (int)_VipsBuf.full$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void full$set(MemorySegment seg, long index, int x) {
        _VipsBuf.full$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lasti$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lasti"));
    public static VarHandle lasti$VH() {
        return _VipsBuf.lasti$VH;
    }
    public static int lasti$get(MemorySegment seg) {
        return (int)_VipsBuf.lasti$VH.get(seg);
    }
    public static void lasti$set( MemorySegment seg, int x) {
        _VipsBuf.lasti$VH.set(seg, x);
    }
    public static int lasti$get(MemorySegment seg, long index) {
        return (int)_VipsBuf.lasti$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lasti$set(MemorySegment seg, long index, int x) {
        _VipsBuf.lasti$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dynamic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dynamic"));
    public static VarHandle dynamic$VH() {
        return _VipsBuf.dynamic$VH;
    }
    public static int dynamic$get(MemorySegment seg) {
        return (int)_VipsBuf.dynamic$VH.get(seg);
    }
    public static void dynamic$set( MemorySegment seg, int x) {
        _VipsBuf.dynamic$VH.set(seg, x);
    }
    public static int dynamic$get(MemorySegment seg, long index) {
        return (int)_VipsBuf.dynamic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dynamic$set(MemorySegment seg, long index, int x) {
        _VipsBuf.dynamic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


