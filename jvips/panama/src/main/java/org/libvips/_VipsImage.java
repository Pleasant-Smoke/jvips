/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsImage {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                ).withName("g_type_instance"),
                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("qdata")
            ).withName("parent_instance"),
            Constants$root.C_INT$LAYOUT.withName("constructed"),
            Constants$root.C_INT$LAYOUT.withName("static_object"),
            Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
            Constants$root.C_POINTER$LAYOUT.withName("nickname"),
            Constants$root.C_POINTER$LAYOUT.withName("description"),
            Constants$root.C_INT$LAYOUT.withName("preclose"),
            Constants$root.C_INT$LAYOUT.withName("close"),
            Constants$root.C_INT$LAYOUT.withName("postclose"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
        ).withName("parent_instance"),
        Constants$root.C_INT$LAYOUT.withName("Xsize"),
        Constants$root.C_INT$LAYOUT.withName("Ysize"),
        Constants$root.C_INT$LAYOUT.withName("Bands"),
        Constants$root.C_INT$LAYOUT.withName("BandFmt"),
        Constants$root.C_INT$LAYOUT.withName("Coding"),
        Constants$root.C_INT$LAYOUT.withName("Type"),
        Constants$root.C_DOUBLE$LAYOUT.withName("Xres"),
        Constants$root.C_DOUBLE$LAYOUT.withName("Yres"),
        Constants$root.C_INT$LAYOUT.withName("Xoffset"),
        Constants$root.C_INT$LAYOUT.withName("Yoffset"),
        Constants$root.C_INT$LAYOUT.withName("Length"),
        Constants$root.C_SHORT$LAYOUT.withName("Compression"),
        Constants$root.C_SHORT$LAYOUT.withName("Level"),
        Constants$root.C_INT$LAYOUT.withName("Bbits"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("time"),
        Constants$root.C_POINTER$LAYOUT.withName("Hist"),
        Constants$root.C_POINTER$LAYOUT.withName("filename"),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_INT$LAYOUT.withName("kill"),
        Constants$root.C_FLOAT$LAYOUT.withName("Xres_float"),
        Constants$root.C_FLOAT$LAYOUT.withName("Yres_float"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("mode"),
        Constants$root.C_INT$LAYOUT.withName("dtype"),
        Constants$root.C_INT$LAYOUT.withName("fd"),
        Constants$root.C_POINTER$LAYOUT.withName("baseaddr"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length"),
        Constants$root.C_INT$LAYOUT.withName("magic"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("start_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("generate_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("stop_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("client1"),
        Constants$root.C_POINTER$LAYOUT.withName("client2"),
        Constants$root.C_POINTER$LAYOUT.withName("sslock"),
        Constants$root.C_POINTER$LAYOUT.withName("regions"),
        Constants$root.C_INT$LAYOUT.withName("dhint"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("meta"),
        Constants$root.C_POINTER$LAYOUT.withName("meta_traverse"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sizeof_header"),
        Constants$root.C_POINTER$LAYOUT.withName("windows"),
        Constants$root.C_POINTER$LAYOUT.withName("upstream"),
        Constants$root.C_POINTER$LAYOUT.withName("downstream"),
        Constants$root.C_INT$LAYOUT.withName("serial"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("history_list"),
        Constants$root.C_POINTER$LAYOUT.withName("progress_signal"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("file_length"),
        Constants$root.C_INT$LAYOUT.withName("hint_set"),
        Constants$root.C_INT$LAYOUT.withName("delete_on_close"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_on_close_filename")
    ).withName("_VipsImage");
    public static MemoryLayout $LAYOUT() {
        return _VipsImage.$struct$LAYOUT;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    static final VarHandle Xsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Xsize"));
    public static VarHandle Xsize$VH() {
        return _VipsImage.Xsize$VH;
    }
    public static int Xsize$get(MemorySegment seg) {
        return (int)_VipsImage.Xsize$VH.get(seg);
    }
    public static void Xsize$set( MemorySegment seg, int x) {
        _VipsImage.Xsize$VH.set(seg, x);
    }
    public static int Xsize$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Xsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Xsize$set(MemorySegment seg, long index, int x) {
        _VipsImage.Xsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Ysize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Ysize"));
    public static VarHandle Ysize$VH() {
        return _VipsImage.Ysize$VH;
    }
    public static int Ysize$get(MemorySegment seg) {
        return (int)_VipsImage.Ysize$VH.get(seg);
    }
    public static void Ysize$set( MemorySegment seg, int x) {
        _VipsImage.Ysize$VH.set(seg, x);
    }
    public static int Ysize$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Ysize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Ysize$set(MemorySegment seg, long index, int x) {
        _VipsImage.Ysize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Bands$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Bands"));
    public static VarHandle Bands$VH() {
        return _VipsImage.Bands$VH;
    }
    public static int Bands$get(MemorySegment seg) {
        return (int)_VipsImage.Bands$VH.get(seg);
    }
    public static void Bands$set( MemorySegment seg, int x) {
        _VipsImage.Bands$VH.set(seg, x);
    }
    public static int Bands$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Bands$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Bands$set(MemorySegment seg, long index, int x) {
        _VipsImage.Bands$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BandFmt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BandFmt"));
    public static VarHandle BandFmt$VH() {
        return _VipsImage.BandFmt$VH;
    }
    public static int BandFmt$get(MemorySegment seg) {
        return (int)_VipsImage.BandFmt$VH.get(seg);
    }
    public static void BandFmt$set( MemorySegment seg, int x) {
        _VipsImage.BandFmt$VH.set(seg, x);
    }
    public static int BandFmt$get(MemorySegment seg, long index) {
        return (int)_VipsImage.BandFmt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BandFmt$set(MemorySegment seg, long index, int x) {
        _VipsImage.BandFmt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Coding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Coding"));
    public static VarHandle Coding$VH() {
        return _VipsImage.Coding$VH;
    }
    public static int Coding$get(MemorySegment seg) {
        return (int)_VipsImage.Coding$VH.get(seg);
    }
    public static void Coding$set( MemorySegment seg, int x) {
        _VipsImage.Coding$VH.set(seg, x);
    }
    public static int Coding$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Coding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Coding$set(MemorySegment seg, long index, int x) {
        _VipsImage.Coding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return _VipsImage.Type$VH;
    }
    public static int Type$get(MemorySegment seg) {
        return (int)_VipsImage.Type$VH.get(seg);
    }
    public static void Type$set( MemorySegment seg, int x) {
        _VipsImage.Type$VH.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        _VipsImage.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Xres$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Xres"));
    public static VarHandle Xres$VH() {
        return _VipsImage.Xres$VH;
    }
    public static double Xres$get(MemorySegment seg) {
        return (double)_VipsImage.Xres$VH.get(seg);
    }
    public static void Xres$set( MemorySegment seg, double x) {
        _VipsImage.Xres$VH.set(seg, x);
    }
    public static double Xres$get(MemorySegment seg, long index) {
        return (double)_VipsImage.Xres$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Xres$set(MemorySegment seg, long index, double x) {
        _VipsImage.Xres$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Yres$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Yres"));
    public static VarHandle Yres$VH() {
        return _VipsImage.Yres$VH;
    }
    public static double Yres$get(MemorySegment seg) {
        return (double)_VipsImage.Yres$VH.get(seg);
    }
    public static void Yres$set( MemorySegment seg, double x) {
        _VipsImage.Yres$VH.set(seg, x);
    }
    public static double Yres$get(MemorySegment seg, long index) {
        return (double)_VipsImage.Yres$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Yres$set(MemorySegment seg, long index, double x) {
        _VipsImage.Yres$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Xoffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Xoffset"));
    public static VarHandle Xoffset$VH() {
        return _VipsImage.Xoffset$VH;
    }
    public static int Xoffset$get(MemorySegment seg) {
        return (int)_VipsImage.Xoffset$VH.get(seg);
    }
    public static void Xoffset$set( MemorySegment seg, int x) {
        _VipsImage.Xoffset$VH.set(seg, x);
    }
    public static int Xoffset$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Xoffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Xoffset$set(MemorySegment seg, long index, int x) {
        _VipsImage.Xoffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Yoffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Yoffset"));
    public static VarHandle Yoffset$VH() {
        return _VipsImage.Yoffset$VH;
    }
    public static int Yoffset$get(MemorySegment seg) {
        return (int)_VipsImage.Yoffset$VH.get(seg);
    }
    public static void Yoffset$set( MemorySegment seg, int x) {
        _VipsImage.Yoffset$VH.set(seg, x);
    }
    public static int Yoffset$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Yoffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Yoffset$set(MemorySegment seg, long index, int x) {
        _VipsImage.Yoffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _VipsImage.Length$VH;
    }
    public static int Length$get(MemorySegment seg) {
        return (int)_VipsImage.Length$VH.get(seg);
    }
    public static void Length$set( MemorySegment seg, int x) {
        _VipsImage.Length$VH.set(seg, x);
    }
    public static int Length$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, int x) {
        _VipsImage.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Compression$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Compression"));
    public static VarHandle Compression$VH() {
        return _VipsImage.Compression$VH;
    }
    public static short Compression$get(MemorySegment seg) {
        return (short)_VipsImage.Compression$VH.get(seg);
    }
    public static void Compression$set( MemorySegment seg, short x) {
        _VipsImage.Compression$VH.set(seg, x);
    }
    public static short Compression$get(MemorySegment seg, long index) {
        return (short)_VipsImage.Compression$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Compression$set(MemorySegment seg, long index, short x) {
        _VipsImage.Compression$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Level"));
    public static VarHandle Level$VH() {
        return _VipsImage.Level$VH;
    }
    public static short Level$get(MemorySegment seg) {
        return (short)_VipsImage.Level$VH.get(seg);
    }
    public static void Level$set( MemorySegment seg, short x) {
        _VipsImage.Level$VH.set(seg, x);
    }
    public static short Level$get(MemorySegment seg, long index) {
        return (short)_VipsImage.Level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Level$set(MemorySegment seg, long index, short x) {
        _VipsImage.Level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Bbits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Bbits"));
    public static VarHandle Bbits$VH() {
        return _VipsImage.Bbits$VH;
    }
    public static int Bbits$get(MemorySegment seg) {
        return (int)_VipsImage.Bbits$VH.get(seg);
    }
    public static void Bbits$set( MemorySegment seg, int x) {
        _VipsImage.Bbits$VH.set(seg, x);
    }
    public static int Bbits$get(MemorySegment seg, long index) {
        return (int)_VipsImage.Bbits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Bbits$set(MemorySegment seg, long index, int x) {
        _VipsImage.Bbits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("time"));
    public static VarHandle time$VH() {
        return _VipsImage.time$VH;
    }
    public static MemoryAddress time$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.time$VH.get(seg);
    }
    public static void time$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.time$VH.set(seg, x);
    }
    public static MemoryAddress time$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Hist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Hist"));
    public static VarHandle Hist$VH() {
        return _VipsImage.Hist$VH;
    }
    public static MemoryAddress Hist$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.Hist$VH.get(seg);
    }
    public static void Hist$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.Hist$VH.set(seg, x);
    }
    public static MemoryAddress Hist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.Hist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Hist$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.Hist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filename"));
    public static VarHandle filename$VH() {
        return _VipsImage.filename$VH;
    }
    public static MemoryAddress filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.filename$VH.get(seg);
    }
    public static void filename$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.filename$VH.set(seg, x);
    }
    public static MemoryAddress filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _VipsImage.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle kill$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("kill"));
    public static VarHandle kill$VH() {
        return _VipsImage.kill$VH;
    }
    public static int kill$get(MemorySegment seg) {
        return (int)_VipsImage.kill$VH.get(seg);
    }
    public static void kill$set( MemorySegment seg, int x) {
        _VipsImage.kill$VH.set(seg, x);
    }
    public static int kill$get(MemorySegment seg, long index) {
        return (int)_VipsImage.kill$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void kill$set(MemorySegment seg, long index, int x) {
        _VipsImage.kill$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Xres_float$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Xres_float"));
    public static VarHandle Xres_float$VH() {
        return _VipsImage.Xres_float$VH;
    }
    public static float Xres_float$get(MemorySegment seg) {
        return (float)_VipsImage.Xres_float$VH.get(seg);
    }
    public static void Xres_float$set( MemorySegment seg, float x) {
        _VipsImage.Xres_float$VH.set(seg, x);
    }
    public static float Xres_float$get(MemorySegment seg, long index) {
        return (float)_VipsImage.Xres_float$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Xres_float$set(MemorySegment seg, long index, float x) {
        _VipsImage.Xres_float$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Yres_float$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Yres_float"));
    public static VarHandle Yres_float$VH() {
        return _VipsImage.Yres_float$VH;
    }
    public static float Yres_float$get(MemorySegment seg) {
        return (float)_VipsImage.Yres_float$VH.get(seg);
    }
    public static void Yres_float$set( MemorySegment seg, float x) {
        _VipsImage.Yres_float$VH.set(seg, x);
    }
    public static float Yres_float$get(MemorySegment seg, long index) {
        return (float)_VipsImage.Yres_float$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Yres_float$set(MemorySegment seg, long index, float x) {
        _VipsImage.Yres_float$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return _VipsImage.mode$VH;
    }
    public static MemoryAddress mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.mode$VH.set(seg, x);
    }
    public static MemoryAddress mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dtype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dtype"));
    public static VarHandle dtype$VH() {
        return _VipsImage.dtype$VH;
    }
    public static int dtype$get(MemorySegment seg) {
        return (int)_VipsImage.dtype$VH.get(seg);
    }
    public static void dtype$set( MemorySegment seg, int x) {
        _VipsImage.dtype$VH.set(seg, x);
    }
    public static int dtype$get(MemorySegment seg, long index) {
        return (int)_VipsImage.dtype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dtype$set(MemorySegment seg, long index, int x) {
        _VipsImage.dtype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fd"));
    public static VarHandle fd$VH() {
        return _VipsImage.fd$VH;
    }
    public static int fd$get(MemorySegment seg) {
        return (int)_VipsImage.fd$VH.get(seg);
    }
    public static void fd$set( MemorySegment seg, int x) {
        _VipsImage.fd$VH.set(seg, x);
    }
    public static int fd$get(MemorySegment seg, long index) {
        return (int)_VipsImage.fd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fd$set(MemorySegment seg, long index, int x) {
        _VipsImage.fd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle baseaddr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("baseaddr"));
    public static VarHandle baseaddr$VH() {
        return _VipsImage.baseaddr$VH;
    }
    public static MemoryAddress baseaddr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.baseaddr$VH.get(seg);
    }
    public static void baseaddr$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.baseaddr$VH.set(seg, x);
    }
    public static MemoryAddress baseaddr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.baseaddr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void baseaddr$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.baseaddr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _VipsImage.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)_VipsImage.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        _VipsImage.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)_VipsImage.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        _VipsImage.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle magic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("magic"));
    public static VarHandle magic$VH() {
        return _VipsImage.magic$VH;
    }
    public static int magic$get(MemorySegment seg) {
        return (int)_VipsImage.magic$VH.get(seg);
    }
    public static void magic$set( MemorySegment seg, int x) {
        _VipsImage.magic$VH.set(seg, x);
    }
    public static int magic$get(MemorySegment seg, long index) {
        return (int)_VipsImage.magic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void magic$set(MemorySegment seg, long index, int x) {
        _VipsImage.magic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_fn"));
    public static VarHandle start_fn$VH() {
        return _VipsImage.start_fn$VH;
    }
    public static MemoryAddress start_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.start_fn$VH.get(seg);
    }
    public static void start_fn$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.start_fn$VH.set(seg, x);
    }
    public static MemoryAddress start_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.start_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.start_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static VipsStartFn start_fn (MemorySegment segment, MemorySession session) {
        return VipsStartFn.ofAddress(start_fn$get(segment), session);
    }
    static final VarHandle generate_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("generate_fn"));
    public static VarHandle generate_fn$VH() {
        return _VipsImage.generate_fn$VH;
    }
    public static MemoryAddress generate_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.generate_fn$VH.get(seg);
    }
    public static void generate_fn$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.generate_fn$VH.set(seg, x);
    }
    public static MemoryAddress generate_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.generate_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void generate_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.generate_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static VipsGenerateFn generate_fn (MemorySegment segment, MemorySession session) {
        return VipsGenerateFn.ofAddress(generate_fn$get(segment), session);
    }
    static final VarHandle stop_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stop_fn"));
    public static VarHandle stop_fn$VH() {
        return _VipsImage.stop_fn$VH;
    }
    public static MemoryAddress stop_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.stop_fn$VH.get(seg);
    }
    public static void stop_fn$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.stop_fn$VH.set(seg, x);
    }
    public static MemoryAddress stop_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.stop_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.stop_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static VipsStopFn stop_fn (MemorySegment segment, MemorySession session) {
        return VipsStopFn.ofAddress(stop_fn$get(segment), session);
    }
    static final VarHandle client1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("client1"));
    public static VarHandle client1$VH() {
        return _VipsImage.client1$VH;
    }
    public static MemoryAddress client1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.client1$VH.get(seg);
    }
    public static void client1$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.client1$VH.set(seg, x);
    }
    public static MemoryAddress client1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.client1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void client1$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.client1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle client2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("client2"));
    public static VarHandle client2$VH() {
        return _VipsImage.client2$VH;
    }
    public static MemoryAddress client2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.client2$VH.get(seg);
    }
    public static void client2$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.client2$VH.set(seg, x);
    }
    public static MemoryAddress client2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.client2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void client2$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.client2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sslock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sslock"));
    public static VarHandle sslock$VH() {
        return _VipsImage.sslock$VH;
    }
    public static MemoryAddress sslock$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.sslock$VH.get(seg);
    }
    public static void sslock$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.sslock$VH.set(seg, x);
    }
    public static MemoryAddress sslock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.sslock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sslock$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.sslock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle regions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("regions"));
    public static VarHandle regions$VH() {
        return _VipsImage.regions$VH;
    }
    public static MemoryAddress regions$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.regions$VH.get(seg);
    }
    public static void regions$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.regions$VH.set(seg, x);
    }
    public static MemoryAddress regions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.regions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void regions$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.regions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dhint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dhint"));
    public static VarHandle dhint$VH() {
        return _VipsImage.dhint$VH;
    }
    public static int dhint$get(MemorySegment seg) {
        return (int)_VipsImage.dhint$VH.get(seg);
    }
    public static void dhint$set( MemorySegment seg, int x) {
        _VipsImage.dhint$VH.set(seg, x);
    }
    public static int dhint$get(MemorySegment seg, long index) {
        return (int)_VipsImage.dhint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dhint$set(MemorySegment seg, long index, int x) {
        _VipsImage.dhint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meta"));
    public static VarHandle meta$VH() {
        return _VipsImage.meta$VH;
    }
    public static MemoryAddress meta$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.meta$VH.get(seg);
    }
    public static void meta$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.meta$VH.set(seg, x);
    }
    public static MemoryAddress meta$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.meta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.meta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meta_traverse$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meta_traverse"));
    public static VarHandle meta_traverse$VH() {
        return _VipsImage.meta_traverse$VH;
    }
    public static MemoryAddress meta_traverse$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.meta_traverse$VH.get(seg);
    }
    public static void meta_traverse$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.meta_traverse$VH.set(seg, x);
    }
    public static MemoryAddress meta_traverse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.meta_traverse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meta_traverse$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.meta_traverse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sizeof_header$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sizeof_header"));
    public static VarHandle sizeof_header$VH() {
        return _VipsImage.sizeof_header$VH;
    }
    public static long sizeof_header$get(MemorySegment seg) {
        return (long)_VipsImage.sizeof_header$VH.get(seg);
    }
    public static void sizeof_header$set( MemorySegment seg, long x) {
        _VipsImage.sizeof_header$VH.set(seg, x);
    }
    public static long sizeof_header$get(MemorySegment seg, long index) {
        return (long)_VipsImage.sizeof_header$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sizeof_header$set(MemorySegment seg, long index, long x) {
        _VipsImage.sizeof_header$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle windows$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("windows"));
    public static VarHandle windows$VH() {
        return _VipsImage.windows$VH;
    }
    public static MemoryAddress windows$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.windows$VH.get(seg);
    }
    public static void windows$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.windows$VH.set(seg, x);
    }
    public static MemoryAddress windows$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.windows$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void windows$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.windows$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle upstream$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("upstream"));
    public static VarHandle upstream$VH() {
        return _VipsImage.upstream$VH;
    }
    public static MemoryAddress upstream$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.upstream$VH.get(seg);
    }
    public static void upstream$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.upstream$VH.set(seg, x);
    }
    public static MemoryAddress upstream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.upstream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void upstream$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.upstream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle downstream$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("downstream"));
    public static VarHandle downstream$VH() {
        return _VipsImage.downstream$VH;
    }
    public static MemoryAddress downstream$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.downstream$VH.get(seg);
    }
    public static void downstream$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.downstream$VH.set(seg, x);
    }
    public static MemoryAddress downstream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.downstream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void downstream$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.downstream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serial"));
    public static VarHandle serial$VH() {
        return _VipsImage.serial$VH;
    }
    public static int serial$get(MemorySegment seg) {
        return (int)_VipsImage.serial$VH.get(seg);
    }
    public static void serial$set( MemorySegment seg, int x) {
        _VipsImage.serial$VH.set(seg, x);
    }
    public static int serial$get(MemorySegment seg, long index) {
        return (int)_VipsImage.serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serial$set(MemorySegment seg, long index, int x) {
        _VipsImage.serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle history_list$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("history_list"));
    public static VarHandle history_list$VH() {
        return _VipsImage.history_list$VH;
    }
    public static MemoryAddress history_list$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.history_list$VH.get(seg);
    }
    public static void history_list$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.history_list$VH.set(seg, x);
    }
    public static MemoryAddress history_list$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.history_list$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void history_list$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.history_list$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle progress_signal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("progress_signal"));
    public static VarHandle progress_signal$VH() {
        return _VipsImage.progress_signal$VH;
    }
    public static MemoryAddress progress_signal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.progress_signal$VH.get(seg);
    }
    public static void progress_signal$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.progress_signal$VH.set(seg, x);
    }
    public static MemoryAddress progress_signal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.progress_signal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_signal$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.progress_signal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle file_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("file_length"));
    public static VarHandle file_length$VH() {
        return _VipsImage.file_length$VH;
    }
    public static long file_length$get(MemorySegment seg) {
        return (long)_VipsImage.file_length$VH.get(seg);
    }
    public static void file_length$set( MemorySegment seg, long x) {
        _VipsImage.file_length$VH.set(seg, x);
    }
    public static long file_length$get(MemorySegment seg, long index) {
        return (long)_VipsImage.file_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void file_length$set(MemorySegment seg, long index, long x) {
        _VipsImage.file_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hint_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hint_set"));
    public static VarHandle hint_set$VH() {
        return _VipsImage.hint_set$VH;
    }
    public static int hint_set$get(MemorySegment seg) {
        return (int)_VipsImage.hint_set$VH.get(seg);
    }
    public static void hint_set$set( MemorySegment seg, int x) {
        _VipsImage.hint_set$VH.set(seg, x);
    }
    public static int hint_set$get(MemorySegment seg, long index) {
        return (int)_VipsImage.hint_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hint_set$set(MemorySegment seg, long index, int x) {
        _VipsImage.hint_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delete_on_close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_on_close"));
    public static VarHandle delete_on_close$VH() {
        return _VipsImage.delete_on_close$VH;
    }
    public static int delete_on_close$get(MemorySegment seg) {
        return (int)_VipsImage.delete_on_close$VH.get(seg);
    }
    public static void delete_on_close$set( MemorySegment seg, int x) {
        _VipsImage.delete_on_close$VH.set(seg, x);
    }
    public static int delete_on_close$get(MemorySegment seg, long index) {
        return (int)_VipsImage.delete_on_close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_on_close$set(MemorySegment seg, long index, int x) {
        _VipsImage.delete_on_close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delete_on_close_filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_on_close_filename"));
    public static VarHandle delete_on_close_filename$VH() {
        return _VipsImage.delete_on_close_filename$VH;
    }
    public static MemoryAddress delete_on_close_filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.delete_on_close_filename$VH.get(seg);
    }
    public static void delete_on_close_filename$set( MemorySegment seg, MemoryAddress x) {
        _VipsImage.delete_on_close_filename$VH.set(seg, x);
    }
    public static MemoryAddress delete_on_close_filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsImage.delete_on_close_filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_on_close_filename$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsImage.delete_on_close_filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


