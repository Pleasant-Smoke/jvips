/*
 * jvips, a Java implementation that interfaces to libvips
 *
 * Copyright (C) 2023 Jonathan Strauss
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * https://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Generated by jextract

package org.libvips;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _VipsForeignSave {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("g_class")
                        ).withName("g_type_instance"),
                        Constants$root.C_INT$LAYOUT.withName("ref_count"),
                        MemoryLayout.paddingLayout(32),
                        Constants$root.C_POINTER$LAYOUT.withName("qdata")
                    ).withName("parent_instance"),
                    Constants$root.C_INT$LAYOUT.withName("constructed"),
                    Constants$root.C_INT$LAYOUT.withName("static_object"),
                    Constants$root.C_POINTER$LAYOUT.withName("argument_table"),
                    Constants$root.C_POINTER$LAYOUT.withName("nickname"),
                    Constants$root.C_POINTER$LAYOUT.withName("description"),
                    Constants$root.C_INT$LAYOUT.withName("preclose"),
                    Constants$root.C_INT$LAYOUT.withName("close"),
                    Constants$root.C_INT$LAYOUT.withName("postclose"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("local_memory")
                ).withName("parent_instance"),
                Constants$root.C_INT$LAYOUT.withName("hash"),
                Constants$root.C_INT$LAYOUT.withName("found_hash"),
                Constants$root.C_INT$LAYOUT.withName("pixels"),
                MemoryLayout.paddingLayout(32)
            ).withName("parent_object")
        ).withName("parent_object"),
        Constants$root.C_INT$LAYOUT.withName("strip"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("background"),
        Constants$root.C_INT$LAYOUT.withName("page_height"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("in"),
        Constants$root.C_POINTER$LAYOUT.withName("ready")
    ).withName("_VipsForeignSave");
    public static MemoryLayout $LAYOUT() {
        return _VipsForeignSave.$struct$LAYOUT;
    }
    public static MemorySegment parent_object$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    static final VarHandle strip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strip"));
    public static VarHandle strip$VH() {
        return _VipsForeignSave.strip$VH;
    }
    public static int strip$get(MemorySegment seg) {
        return (int)_VipsForeignSave.strip$VH.get(seg);
    }
    public static void strip$set( MemorySegment seg, int x) {
        _VipsForeignSave.strip$VH.set(seg, x);
    }
    public static int strip$get(MemorySegment seg, long index) {
        return (int)_VipsForeignSave.strip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strip$set(MemorySegment seg, long index, int x) {
        _VipsForeignSave.strip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle background$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("background"));
    public static VarHandle background$VH() {
        return _VipsForeignSave.background$VH;
    }
    public static MemoryAddress background$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.background$VH.get(seg);
    }
    public static void background$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignSave.background$VH.set(seg, x);
    }
    public static MemoryAddress background$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.background$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void background$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignSave.background$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle page_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page_height"));
    public static VarHandle page_height$VH() {
        return _VipsForeignSave.page_height$VH;
    }
    public static int page_height$get(MemorySegment seg) {
        return (int)_VipsForeignSave.page_height$VH.get(seg);
    }
    public static void page_height$set( MemorySegment seg, int x) {
        _VipsForeignSave.page_height$VH.set(seg, x);
    }
    public static int page_height$get(MemorySegment seg, long index) {
        return (int)_VipsForeignSave.page_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page_height$set(MemorySegment seg, long index, int x) {
        _VipsForeignSave.page_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle in$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("in"));
    public static VarHandle in$VH() {
        return _VipsForeignSave.in$VH;
    }
    public static MemoryAddress in$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.in$VH.get(seg);
    }
    public static void in$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignSave.in$VH.set(seg, x);
    }
    public static MemoryAddress in$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.in$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void in$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignSave.in$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ready$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ready"));
    public static VarHandle ready$VH() {
        return _VipsForeignSave.ready$VH;
    }
    public static MemoryAddress ready$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.ready$VH.get(seg);
    }
    public static void ready$set( MemorySegment seg, MemoryAddress x) {
        _VipsForeignSave.ready$VH.set(seg, x);
    }
    public static MemoryAddress ready$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_VipsForeignSave.ready$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ready$set(MemorySegment seg, long index, MemoryAddress x) {
        _VipsForeignSave.ready$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


